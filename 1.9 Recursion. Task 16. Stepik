#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

vector <int> v(11);
vector <int> value(11);
int sum = 0;

void IniteValues (int n){
	for (int j = 0; j <= n; j++){
		value[j] = j;
	}
}

void IniteBoard (int Start, int n){
	for (int i = 1; i <= n; i++){
		v[i] = 0;
	}
	v[1] = Start;
	IniteValues(n);
	value[Start] = 0;
}

bool CanPlaceNextQuin (int i, int value){
  for (int k = i - 1; k > 0; k--){
    if (abs(i - k) != abs(value - v[k]));
    else return false;
  }
return true;
}

void StepBack (int i, int n){
	if (i >= 1){
		if (v[i] < n){
			value[v[i]] = v[i];
			v[i] = 0;
			for (int j = v[i]; j <= n; ++j){
				if (value[j] != 0){
					if (CanPlaceNextQuin){
						v[i] = value[j];
						value[j] = 0;
						j = n + 1;
						PlaceQuin(++i, n);
					}
				}
			}
		}
		StepBack(--i, n);
	}
}


void PlaceQuin (int i, int n){
	if (i <= n){
		for (int j = v[i]; j <= n; ++j){
			if (value[j] != 0){
				if (CanPlaceNextQuin(i, value[j])){
					v[i] = value[j];
					value[j] = 0;
					j = n + 1;
					PlaceQuin(++i, n);
				}
			}
		}
		StepBack(--i, n);
	} else {
		v[0]++;
		sum++;
		StepBack(--i, n);
	}
		
}

int main (){
  int n, point;
  int init = 0, output = 1;
  
  //INPUT
  cin >> n >> point;

  
  //inite v[i]
  //inite value[j]

  IniteBoard(point, n);
  
  
  //PROCESSING
  //PlaceQuin(++point, n);
  //IniteBoard(2, n);
  //(2, n);

  
  //OUTPUT
  cout << sum << endl;

  //output of v[i]
  output = 1;
  if (output == 1) {
    for (int i = 0; i <= n; i++){
      cout << v[i] << " ";
    }
    cout << endl;
  }
  //output of value[j]
  if (output == 1) {
    for (int j = 0; j <= n; j++){
      cout << value[j] << " ";
    }
  }  


return 0;
}
