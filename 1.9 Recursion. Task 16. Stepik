#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

vector <int> v(11);	//vector of coordinates of Quins. i - column, v[i] - line.
		//v[0] is used like a counter of successful placing all of the Quins!
vector <int> value(11); //vector of FREE values which can be given to v[i]. 
		//This is made to avoid testing if Quins are on the same line.

void IniteValues (int n){	//Proc that initiate possible values for "lines".
	for (int j = 0; j <= n; j++){
		value[j] = j;
	}
}

void IniteBoard (int Start, int n){	//Proc that initiate coordinates of Quins.
	for (int i = 1; i <= n; i++){
		v[i] = 0;
	}
	//v[1] = Start;
	IniteValues(n);
	//value[Start] = 0;
}

  //output of v[i]
  void Output (int k, int j, int n){
  	cout << "v[" << k << "]:     ";
  	for (int i = 0; i <= n; i++){
	cout << v[i] << " ";
	}
	cout << endl;
	cout << "value[" << j << "]: ";
	for (int j = 0; j <= n; j++){
	cout << value[j] << " ";
	}
	cout << endl;
  }


bool CanPlaceQuin (int i, int value){
  for (int k = i - 1; k > 0; k--){
    if (abs(i - k) != abs(value - v[k]));
    else return false;
  }
return true;
}

int Step (int i, int n){
	int j = 0;
	if ((i > 0) && (i <= n)){
		//branch of the investigment
		//cout << "If Branch " << v[0] << endl;
		
		j = v[i];
		//Output(i, j, n);
		while (j < n){
			j++;
			if (value[j] != 0){
				if (CanPlaceQuin(i, value[j])){	//step forward
					value[v[i]] = v[i];	//saving current value in the 'i' colon
					v[i] = value[j];	//placing new (tested) value to the board
					value[j] = 0;	//deleting value that we placed above from the vecter of free values
					return 0 + Step(++i, n);	//going to the next colon
				}
			}
		} 
		//step back
		value[v[i]] = v[i];	//saving current value in the 'i' colon to the vecter of free values
		v[i] = 0;		//deleting value in the 'i' colon
		return 0 + Step(--i, n);	//going to the previous colon
		
	}
	else {
		//cout << "Else Branch" << endl;
		//Output(i, j, n);
		if (i > n){			//branch of succes
			v[0]++;		//Plus one to the amount of cases
			Output(i, j, n);	//We con print all valid cases! =)
			return 1 + Step(--i, n);	//going back to find more cases
		}
		else if (i == 0) {
			//cout << "=================" << endl << "v[0] = " << v[0] <<" The End" << endl << "=================" << endl; //This is the end (if i = 0)}
			return 0;

		}
	} return 0;
}

int main (){
  int n;
  
  //INPUT
  cin >> n;
  IniteBoard(0, n);
  
  
  //PROCESSING
  cout << Step(1,n);
  

  
  //OUTPUT
  //Output(1, 1, n);	//Output for debugging

return 0;
}
